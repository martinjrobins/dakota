Blurb::
Deactivate Dakota features to simplify interface development, 
increase execution speed, or reduce memory and disk requirements
Description::
The optional \c deactivate specification block includes three features
which a user may deactivate in order to simplify interface development, 
increase execution speed, and/or reduce memory and disk requirements:

\li Active set vector (ASV) control: deactivation of this feature
using a \c deactivate \c active_set_vector specification allows the
user to turn off any variability in ASV values so that active set
logic can be omitted in the user's simulation interface. This option
trades some efficiency for simplicity in interface development. The
default behavior is to request the minimum amount of data required by
an algorithm at any given time, which implies that the ASV values may
vary from one function evaluation to the next. Since the user's
interface must return the data set requested by the ASV values, this
interface must contain additional logic to account for any variations
in ASV content. Deactivating this ASV control causes %Dakota to always
request a "full" data set (the full function, gradient, and Hessian
data that is available from the interface as specified in the
responses specification) on each function evaluation. For example, if
ASV control has been deactivated and the responses section specifies
four response functions, analytic gradients, and no Hessians, then the
ASV on every function evaluation will be { 3 3 3 3 }, regardless of
what subset of this data is currently needed. While wasteful of
computations in many instances, this simplifies the interface and
allows the user to return the same data set on every evaluation.
Conversely, if ASV control is active (the default behavior), then the
ASV requests in this example might vary from { 1 1 1 1 } to { 2 0 0 2 }, 
etc., according to the specific data needed on a particular
function evaluation. This will require the user's interface to read
the ASV requests and perform the appropriate logic in conditionally
returning only the data requested. In general, the default ASV
behavior is recommended for the sake of computational efficiency,
unless interface development time is a critical concern. Note that in
both cases, the data returned to %Dakota from the user's interface must
match the ASV passed in, or else a response recovery error will
result. However, when the ASV control is deactivated, the ASV values
are invariant and need not be checked on every evaluation. \e Note:
Deactivating the ASV control can have a positive effect on load
balancing for parallel %Dakota executions. Thus, there is significant
overlap in this ASV control option with speculative gradients.
There is also overlap with the mode override
approach used with certain optimizers 
to combine individual value, gradient, and Hessian requests.

\li Function evaluation cache: deactivation of this feature using a \c
deactivate \c evaluation_cache specification allows the user to avoid
retention of the complete function evaluation history in memory. This
can be important for reducing memory requirements in large-scale
applications (i.e., applications with a large number of variables or
response functions) and for eliminating the overhead of searching for
duplicates within the function evaluation cache prior to each new
function evaluation (e.g., for improving speed in problems with 1000's
of inexpensive function evaluations or for eliminating overhead when
performing timing studies). However, the downside is that unnecessary
computations may be performed since duplication in function evaluation
requests may not be detected. For this reason, this option is not
recommended when function evaluations are costly. \e Note:
duplication detection within %Dakota can be deactivated, but duplication
detection features within specific optimizers may still be active.

\li Strict Cache Equality: By default, Dakota's evaluation cache and
restart capabilities are based on strict binary equality. This provides
a performance advantage, as it permits a hash-based data structure to 
be used to search the evaluation cache. However, deactiving strict equality
may prevent cache misses, which can occur when attempting to use a restart 
file on a machine different from the one on which it was generated.

\li Restart file: deactivation of this feature using a \c deactivate
\c restart_file specification allows the user to eliminate the output
of each new function evaluation to the binary restart file. This can
increase speed and reduce disk storage requirements, but at the
expense of a loss in the ability to recover and continue a run that
terminates prematurely (e.g., due to a system crash or network
problem). This option is not recommended when function evaluations
are costly or prone to failure. Please note that using the \c deactivate
\c restart_file specification will result in a zero length restart file 
with the default name \c dakota.rst.

These three features may be deactivated independently and concurrently.


Topics::	
Examples::
Theory::
Faq::
See_Also::	
