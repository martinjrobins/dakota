Blurb::
Strategy to compare a set of optimal solutions
Description::
In the pareto set optimization strategy (\c pareto_set), a series of
optimization or least squares calibration runs are performed for
different weightings applied to multiple objective functions. This
set of optimal solutions defines a "Pareto set," which is useful for
investigating design trade-offs between competing objectives. Again,
these optimizations can be performed concurrently, similar to the
multi-start strategy discussed above. The code is similar enough to
the \c multi_start technique that both strategies are implemented in
the same ConcurrentStrategy class.

The \c pareto_set strategy must specify an optimization or least
squares calibration method using \c method_pointer. This minimizer is
responsible for computing a set of optimal solutions from a set of
response weightings (multi-objective weights or least squares term
weights). 

These weightings can be specified as follows:
-# using \c
   random_weight_sets, in which case weightings are selected randomly
   within [0,1] bounds
-# using \c weight_sets, in which the weighting sets are specified in a list
-# using both \c random_weight_sets and \c weight_sets, for which the 
   combined set of weights will be used.
-* In aggregate, at least one set of weights must be specified.

The set of optimal solutions is called the "pareto set," which can
provide valuable design trade-off information when there are competing
objectives.


Topics::	not_yet_reviewed
Examples::
A \c pareto_set example specification is:
\verbatim
strategy,
	pareto_set
	 method_pointer = 'NLP1'
     random_weight_sets = 10
\endverbatim


Theory::
Faq::
See_Also::	
