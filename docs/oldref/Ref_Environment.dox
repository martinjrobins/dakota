namespace Dakota {

/** \page EnvCommands Environment Commands

\htmlonly
<b>Environment Commands Table of Contents</b>
<ul>
<li> <a href="EnvCommands.html#EnvDescr">Environment Description</a>
<li> <a href="EnvCommands.html#EnvSpec">Environment Specification</a>
<li> <a href="EnvCommands.html#EnvOutput">Environment Output Controls</a>
<li> <a href="EnvCommands.html#EnvMethPtr">Environment Method Pointer Control</a>
</ul>
\endhtmlonly


\section EnvDescr Environment Description


The environment section in a %Dakota input file specifies the top
level solution environment which will govern the management of
iterators and models in the solution of the problem of interest.

The environment specification supports indentification of the
top-level method (\c top_method_pointer) that provides the starting
point for the iteration.  The corresponding method specification may
recurse with additional sub-method pointers in the case of
"meta-iteration" (see \ref MethodMeta) or may specify a single method
without recursion.  Either case will ultimately result in
identification of one or more model specifications using \c
model_pointer (see \ref MethodIndControl), which again may or may not
involve further recursion (see \ref ModelNested and \ref
ModelSurrogate for recursion cases).  Each of the model specifications
identify the variables and responses specifications (using \c
variables_pointer and \c responses_pointer from \ref ModelCommands)
that are used to build the model, and depending on the type of model,
may also identify an interface specification (using \c
interface_pointer from \ref ModelCommands).  If one of these
specifications does not provide an optional pointer, then that
component will be constructed using the last specification parsed.

In addition to the \c top_method_pointer, the environment specification
provides a variety of output controls, including graphics options, data
tabulation options, output precision, and results database options.

Specification of a environment block in an input file is optional, in
which case the top level method will be inferred.  In the case of a
single method specification, there is no ambiguity, and in the case of
multiple method specifications, the top level method will be deduced
from the hierarchical relationships implied by method pointers.  If
this inference is not well defined (e.g., multiple method
specifications without any pointer relationship), then the default
behavior is to employ the last method specification parsed.


\section EnvSpec Environment Specification


The environment specification has the following structure:
\verbatim
environment,
	<output controls>
	<top method pointer>
\endverbatim

Referring to dakota.input.summary, the environment output controls are
defined in several optional blocks, followed by the optional \c
top_method_pointer specification. The following sections provide
additional detail on the output and method pointer controls.


\section EnvOutput Environment Output Controls


The environment output controls are summarized in \ref T4d1 
"Table 4.1", including graphics, output data, and results database
controls.  The \c graphics flag activates a 2D graphics window
containing history plots for the variables and response functions in
the study.  This window is updated in an event loop with approximately
a 2 second cycle time.  The \c tabular_graphics_data flag activates
file tabulation of the same variables and response function history
data that gets passed to graphics windows with use of the \c graphics
flag.  The \c tabular_graphics_file specification optionally specifies
a name to use for this file (\c dakota_tabular.dat is the default).
Within the file, the variables and response functions appear as
columns and each function evaluation provides a new table row.  This
capability is most useful for post-processing of %Dakota results with
third-party graphics tools such as MATLAB, Tecplot, etc.  There is no
dependence between the \c graphics flag and the \c
tabular_graphics_data flag; they may be used independently or
concurrently.  Numeric output precision (as passed to the C++ control
std::setprecision) can be controlled with \c output_precision with an
upper limit of 16 enforced at run-time.  When this control is not
specified, most %Dakota output will default to a precision of 10,
though filesystem interfaces and pre-run output use higher precision
for accuracy and better results reproducibility.

Experimental capability: Final results from a %Dakota study can be
output to dakota_results.txt by specifying \c results_output
(optionally specifying an alternate file name with \c
results_output_filename).  The current experimental text file format
is hierarchical and a precursor to planned output to structured text
formats such as XML or YAML and binary formats such as HDF5.  The
contents, organization, and format of results files are all under
active development and are subject to change.

\anchor T4d1
<table>
<caption align = "top">
\htmlonly
Table 4.1
\endhtmlonly
Specification detail for output controls
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>%Graphics flag
<td>\c graphics
<td>none
<td>Optional
<td>no graphics
<tr>
<td>Tabulation of graphics data
<td>\c tabular_graphics_data
<td>none
<td>Optional group
<td>no data tabulation
<tr>
<td>File name for tabular graphics data
<td>\c tabular_graphics_file
<td>string
<td>Optional
<td>\c dakota_tabular.dat
<tr>
<td>Numeric output precision
<td>\c output_precision
<td>integer
<td>Optional
<td>10 (for most output)
<tr>
<td>Enable results output
<td>\c results_output
<td>none
<td>Optional
<td>no output DB
<tr>
<td>File name for results output
<td>\c results_output_file
<td>string
<td>Optional
<td>\c dakota_results.txt
</table>


\section EnvMethPtr Environment Method Pointer Control


An optional \c top_method_pointer specification may be used to point
to a particular method specification.  If \c top_method_pointer is not
used, then it will be inferred as decribed in \ref EnvDescr (no \c
top_method_pointer within an environment specification is treated the
same as no environment specification).  \ref T4d7 "Table 4.7"
summarizes the method identification inputs.

\anchor T4d7
<table>
<caption align = "top">
\htmlonly
Table 4.7
\endhtmlonly
Specification detail for top method pointer
</caption>
<tr>
<td><b>Description</b>
<td><b>Keyword</b>
<td><b>Associated Data</b>
<td><b>Status</b>
<td><b>Default</b>
<tr>
<td>Method pointer
<td>\c top_method_pointer
<td>string
<td>Optional
<td>inferred from hierarchical method pointer relationships
</table>

\htmlonly
<hr>
<br><b><a href="IntroCommands.html#IntroCommands">Previous chapter</a></b>
<br>
<br><b><a href="MethodCommands.html#MethodCommands">Next chapter</a></b>
\endhtmlonly

*/

} // namespace Dakota
